
#define ERROR_UNSUPPORTED_PROTOCOL -1
#define ERROR_SOCK_CREATION_FAILED -2
#define ERROR_CONNECT_FAILED       -3
#define HTTP_MAX_RETRIES            1

namespace ScutNetwork
{
	//class INetStatusNotify;

	enum EAsyncInfoStatus
	{
		aisNone,
		aisProgress,
		aisSucceed,	
		aisTimeOut,
		aisFailed,
	};

	enum EAsyncMode
	{
		amGet,
		amPost,
	};

	enum ENetType
	{
		ntNone,
		ntWIFI,
		ntCMWAP,
		ntCMNET,
	};

	//class CNetClientBase;
	/*typedef */struct AsyncInfo
	{
		CNetClientBase* Sender;			//发起请求的HttpClient
		CHttpClientResponse* Response;	//响应对象		
		CScutString Url;						//URL
		const void* PostData;			//提交的数据
		int PostDataSize;				//提交的数据大小
		bool FormFlag;					//是否是表单提交
		EAsyncInfoStatus Status;		//网络请求异步状态
		EAsyncMode Mode;				//异步请求模式
		int ProtocalType;               //0:HTTP， 1:TCP
		void* pScene;
		int Data1;						//数据1
		int Data2;						//数据2
		AsyncInfo()
		{
			Reset();
		}
		~AsyncInfo()
		{
		}
		void Reset();
	}/* *PAsyncInfo*/;
	//typedef AsyncInfo *PAsyncInfo;

	class CNetClientBase
	{
	public:
		virtual int AsyncNetGet(const char* url, CHttpClientResponse* resp) = 0;
	
		//异步情况下，需要设定网络状态通知接口
		virtual void SetNetStautsNotify(INetStatusNotify* pNetNotify);
		virtual INetStatusNotify* GetNetStautsNotify();
		//头信息与代理服务器设置
		virtual BOOL AddHeader(const char *name, const char *value);

		//获取和设定超时时间，以秒为单位，0或INFINTE表示无超时时间
		int GetTimeOut();
		void SetTimeOut(int nTimeOut);

		//是否使用进度通知
		virtual bool GetUseProgressReport();
		virtual void SetUseProgressReport(bool bReport);		

		//重设状态
		virtual void FullReset();
		virtual void Reset();
		CScutString	GetHost();	

		//是否处于繁忙状态，如果是那么不可再调用Get或Post
		//iPhone平台也可通过此判断异步请求是否已经完成
		virtual bool IsBusy();
		
		AsyncInfo* GetAsyncInfo();

		CURL* GetCurlHandle();
		
		//注册lua网络回调
		virtual void RegisterCustomLuaHandle(const char* szHandle);
	};

}
